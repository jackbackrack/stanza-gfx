;; See license.txt for details about licensing.

defpackage gfx/gl :
  import core
  import collections
  import utils/string

extern printf: (ptr<byte>, ? ...) -> int
extern glInitNames: () -> int
extern glFlush: () -> int
extern glRenderMode: (int) -> int
extern glSelectBuffer: (int, ptr<int>) -> int
extern glPushName: (int) -> int
extern glPopName: () -> int
extern glLoadName: (int) -> int
extern glGetDoublev: (int, ptr<double>) -> int
extern glGetIntegerv: (int, ptr<int>) -> int
extern glBindTexture: (int, int) -> int
extern glGenTextures: (int, ptr<int>) -> int
extern glGenLists: (int) -> int
extern glDeleteLists: (int, int) -> int
extern glNewList: (int, int) -> int
extern glCallList: (int) -> int
extern glEndList: (int) -> int
extern glDeleteTextures: (int, ptr<int>) -> int
extern glTexParameteri: (int, int, int) -> int
extern glTexImage2D: (int, int, int, int, int, int, int, int, ptr<byte>) -> int
extern glTexSubImage2D: (int, int, int, int, int, int, int, int, ptr<byte>) -> int
extern glTexCoord2f: (float, float) -> int
extern glReadPixels: (int, int, int, int, int, int, ptr<byte>) -> int
extern glScissor: (int, int, int, int) -> int
extern glEnable: (int) -> int
extern glDisable: (int) -> int
extern glBlendFunc: (int, int) -> int
extern glDepthFunc: (int) -> int
extern glClearDepth: (float) -> int
extern glViewport: (int, int, int, int) -> int
extern glClear: (int) -> int
extern glHint: (int, int) -> int
extern glMatrixMode: (int) -> int
extern glPushMatrix: () -> int
extern glPopMatrix: () -> int
extern glPushAttrib: (int) -> int
extern glPopAttrib: () -> int
extern glLoadIdentity: () -> int
extern glOrtho: (double, double, double, double, double, double) -> int
extern glFrustum: (double, double, double, double, double, double) -> int
extern glRotatef: (float, float, float, float) -> int
extern glTranslatef: (float, float, float) -> int
extern glScalef: (float, float, float) -> int
extern glColor3f: (float, float, float) -> int
extern glColor4f: (float, float, float, float) -> int
extern glVertex3f: (float, float, float) -> int
extern glVertex2f: (float, float) -> int
extern glBegin: (int) -> int
extern glEnd: () -> int
extern glLineWidth: (float) -> int
extern glPointSize: (float) -> int
extern malloc: (long) -> ptr<?>
extern free: (ptr<?>) -> int

public lostanza defn gl-init-names () -> ref<Int> :
  call-c glInitNames()
  return new Int{ 0 }

public lostanza defn gl-flush () -> ref<Int> :
  call-c glFlush()
  return new Int{ 0 }

public lostanza defn gl-render-mode (mode:ref<Int>) -> ref<Int> :
  val res = call-c glRenderMode(mode.value)
  return new Int{ res }

public lostanza defn gl-push-name (name:ref<Int>) -> ref<Int> :
  call-c glPushName(name.value)
  return new Int{ 0 }

public lostanza defn gl-pop-name () -> ref<Int> :
  call-c glPopName()
  return new Int{ 0 }

public lostanza defn gl-load-name (name:ref<Int>) -> ref<Int> :
  call-c glLoadName(name.value)
  return new Int{ 0 }

public lostanza defn gl-select-buffer (size:ref<Int>, buf:ref<IntArray>) -> ref<Int> :
  call-c glSelectBuffer(size.value, addr!(buf.data))
  return new Int{ 0 }

lostanza val *int-val* : ptr<int> = call-c malloc(1 * sizeof(int))

public lostanza defn gl-get-int (kind:ref<Int>) -> ref<Int> :
  call-c glGetIntegerv( kind.value, *int-val* )
  return new Int{ *int-val*[ 0 ] }

public lostanza defn gl-get-ints (kind:ref<Int>, buf:ref<IntArray>) -> ref<Int> :
  val res = call-c glGetIntegerv( kind.value, addr!(buf.data) )
  return new Int{ res }

public lostanza deftype ImageDat :
  value: ptr<byte>

public lostanza defn image-dat-value (dat:ref<ImageDat>) -> ref<Long> :
  return new Long{dat.value as long}

defmethod print (s:OutputStream, o:ImageDat) :
  print-all(["ImageDat(" image-dat-value(o) ")"])

public lostanza defn null-image-dat () -> ref<ImageDat> :
  return new ImageDat{0L as ptr<byte>}

public lostanza deftype Texture :
  value: int

public lostanza defn texture-value (tex:ref<Texture>) -> ref<Int> :
  return new Int{tex.value}

defmethod print (s:OutputStream, o:Texture) :
  print-all(["Texture(" texture-value(o) ")"])

public lostanza defn gl-bind-texture (kind:ref<Int>, t:ref<Texture>) -> ref<False> :
  ;; call-c printf("BIND-TEXTURE %d %d\n", kind.value, t.value)
  call-c glBindTexture(kind.value, t.value)
  return false

public lostanza defn gl-null-texture () -> ref<Texture> :
  val res = new Texture{-1}
  return res

public lostanza defn null? (t:ref<Texture>) -> ref<True|False> :
  if t.value == -1 : return true else : return false

public lostanza defn gl-gen-texture () -> ref<Texture> :
  val res = new Texture{0}
  call-c glGenTextures(1, addr!(res.value))
  return res

public lostanza defn gl-delete-texture (t:ref<Texture>) -> ref<False> :
  call-c glDeleteTextures(1, addr!(t.value))
  return false

public lostanza defn gl-tex-parameteri (a:ref<Int>, b:ref<Int>, c:ref<Int>) -> ref<False> :
  call-c glTexParameteri(a.value, b.value, c.value)
  return false

public lostanza defn gl-tex-image-2d (target:ref<Int>, level:ref<Int>, internal-format:ref<Int>, width:ref<Int>, height:ref<Int>, border:ref<Int>, format:ref<Int>, type:ref<Int>, data:ref<ImageDat>) -> ref<False> :
  call-c glTexImage2D(target.value, level.value, internal-format.value, width.value, height.value, border.value, format.value, type.value, data.value)
  return false

public lostanza defn gl-tex-sub-image-2d (target:ref<Int>, level:ref<Int>, xoffset:ref<Int>, yoffset:ref<Int>, width:ref<Int>, height:ref<Int>, format:ref<Int>, type:ref<Int>, data:ref<ImageDat>) -> ref<False> :
  call-c glTexSubImage2D(target.value, level.value, xoffset.value, yoffset.value, width.value, height.value, format.value, type.value, data.value)
  return false

public lostanza defn gl-tex-coord2f (x:ref<Float>, y:ref<Float>) -> ref<False> :
  call-c glTexCoord2f(x.value, y.value)
  return false

public lostanza defn gl-read-pixel (x:ref<Int>, y:ref<Int>) -> ref<Int> :
  val data = call-c malloc(4) as ptr<int>
  call-c glReadPixels(x.value, y.value, 1, 1, GL-RGBA.value, GL-UNSIGNED-BYTE.value, data as ptr<byte>)
  val res = new Int{[data]}
  call-c free(data)
  return res

public lostanza defn gl-scissor (x:ref<Int>, y:ref<Int>, width:ref<Int>, height:ref<Int>) -> ref<False> :
  call-c glScissor(x.value, y.value, width.value, height.value)
  return false

public lostanza deftype DisplayList :
  value: int

lostanza defn display-list-value (dl:ref<DisplayList>) -> ref<Int> :
  return new Int{dl.value}

defmethod print (s:OutputStream, o:DisplayList) :
  print-all(["DisplayList(" display-list-value(o) ")"])

public lostanza defn gl-gen-list () -> ref<DisplayList> :
  return new DisplayList{call-c glGenLists(1)}

public lostanza defn gl-null-list () -> ref<DisplayList> :
  return new DisplayList{-1}

public lostanza defn null? (dl:ref<DisplayList>) -> ref<True|False> :
  if dl.value == -1: return true else: return false

public lostanza defn gl-del-list (dl:ref<DisplayList>) -> ref<False> :
  call-c glDeleteLists(dl.value, 1)
  return false

public lostanza defn gl-new-list (dl:ref<DisplayList>, op:ref<Int>) -> ref<False> :
  call-c glNewList(dl.value, op.value)
  return false

public lostanza defn gl-end-list (dl:ref<DisplayList>) -> ref<False> :
  call-c glEndList(dl.value)
  return false

public lostanza defn gl-call-list (dl:ref<DisplayList>) -> ref<False> :
  call-c glCallList(dl.value)
  return false

public lostanza defn gl-depth-func (kind:ref<Int>) -> ref<False> :
  call-c glDepthFunc(kind.value)
  return false

public lostanza defn gl-clear-depth (x:ref<Float>) -> ref<False> :
  call-c glClearDepth(x.value)
  return false

public lostanza defn gl-enable (features:ref<Int>) -> ref<False> :
  call-c glEnable(features.value)
  return false

public lostanza defn gl-disable (features:ref<Int>) -> ref<False> :
  call-c glDisable(features.value)
  return false

public lostanza defn gl-blend-func (sfactor:ref<Int>, dfactor:ref<Int>) -> ref<False> :
  call-c glBlendFunc(sfactor.value, dfactor.value)
  return false

public lostanza defn gl-viewport (x:ref<Int>, y:ref<Int>, w:ref<Int>, h:ref<Int>) -> ref<False> :
  call-c glViewport(x.value, y.value, w.value, h.value)
  return false

public lostanza defn gl-hint (target:ref<Int>, mode:ref<Int>) -> ref<False> :
  call-c glHint(target.value, mode.value)
  return false

public lostanza defn gl-clear (m:ref<Int>) -> ref<False> :
  call-c glClear(m.value)
  return false

public lostanza defn gl-matrix-mode (m:ref<Int>) -> ref<False> :
  call-c glMatrixMode(m.value)
  return false

public lostanza defn gl-load-identity () -> ref<False> :
  call-c glLoadIdentity()
  return false

public lostanza defn gl-ortho (a:ref<Float>, b:ref<Float>, c:ref<Float>, d:ref<Float>, e:ref<Float>, f:ref<Float>) -> ref<False> :
  call-c glOrtho(a.value as double, b.value as double, c.value as double, d.value as double, e.value as double, f.value as double)
  return false

public lostanza defn gl-frustum (a:ref<Float>, b:ref<Float>, c:ref<Float>, d:ref<Float>, e:ref<Float>, f:ref<Float>) -> ref<False> :
  call-c glFrustum(a.value as double, b.value as double, c.value as double, d.value as double, e.value as double, f.value as double)
  return false

public lostanza defn gl-rotatef (a:ref<Float>, x:ref<Float>, y:ref<Float>, z:ref<Float>) -> ref<False> :
  call-c glRotatef(a.value, x.value, y.value, z.value)
  return false

public lostanza defn gl-translatef (x:ref<Float>, y:ref<Float>, z:ref<Float>) -> ref<False> :
  call-c glTranslatef(x.value, y.value, z.value)
  return false

public lostanza defn gl-scalef (x:ref<Float>, y:ref<Float>, z:ref<Float>) -> ref<False> :
  call-c glScalef(x.value, y.value, z.value)
  return false

public lostanza defn gl-line-width (w:ref<Float>) -> ref<False> :
  call-c glLineWidth(w.value)
  return false

public lostanza defn gl-point-size (w:ref<Float>) -> ref<False> :
  call-c glPointSize(w.value)
  return false

public lostanza defn gl-begin (m:ref<Int>) -> ref<False> :
  call-c glBegin(m.value)
  return false

public lostanza defn gl-push-matrix () -> ref<False> :
  call-c glPushMatrix()
  return false

public lostanza defn gl-pop-matrix () -> ref<False> :
  call-c glPopMatrix()
  return false

public lostanza defn gl-push-attrib (a:ref<Int>) -> ref<False> :
  call-c glPushAttrib(a.value)
  return false

public lostanza defn gl-pop-attrib () -> ref<False> :
  call-c glPopAttrib()
  return false

public lostanza defn gl-color3f (r:ref<Float>, g:ref<Float>, b:ref<Float>) -> ref<False> :
  call-c glColor3f(r.value, g.value, b.value)
  return false

public lostanza defn gl-color4f (r:ref<Float>, g:ref<Float>, b:ref<Float>, a:ref<Float>) -> ref<False> :
  call-c glColor4f(r.value, g.value, b.value, a.value)
  return false

public lostanza defn gl-vertex3f (x:ref<Float>, y:ref<Float>, z:ref<Float>) -> ref<False> :
  call-c glVertex3f(x.value, y.value, z.value)
  return false

public lostanza defn gl-vertex2f (x:ref<Float>, y:ref<Float>) -> ref<False> :
  call-c glVertex2f(x.value, y.value)
  return false

public lostanza defn gl-end () -> ref<False> :
  call-c glEnd()
  return false

public val GL-BGR-EXT =                        hex-to-int("0x80E0")
public val GL-BGRA-EXT =                       hex-to-int("0x80E1")

public val GL-CURRENT-BIT =                    hex-to-int("0x00000001")
public val GL-POINT-BIT =                      hex-to-int("0x00000002")
public val GL-LINE-BIT =                       hex-to-int("0x00000004")
public val GL-POLYGON-BIT =                    hex-to-int("0x00000008")
public val GL-POLYGON-STIPPLE-BIT =            hex-to-int("0x00000010")
public val GL-PIXEL-MODE-BIT =                 hex-to-int("0x00000020")
public val GL-LIGHTING-BIT =                   hex-to-int("0x00000040")
public val GL-FOG-BIT =                        hex-to-int("0x00000080")
public val GL-DEPTH-BUFFER-BIT =               hex-to-int("0x00000100")
public val GL-ACCUM-BUFFER-BIT =               hex-to-int("0x00000200")
public val GL-STENCIL-BUFFER-BIT =             hex-to-int("0x00000400")
public val GL-VIEWPORT-BIT =                   hex-to-int("0x00000800")
public val GL-TRANSFORM-BIT =                  hex-to-int("0x00001000")
public val GL-ENABLE-BIT =                     hex-to-int("0x00002000")
public val GL-COLOR-BUFFER-BIT =               hex-to-int("0x00004000")
public val GL-HINT-BIT =                       hex-to-int("0x00008000")
public val GL-EVAL-BIT =                       hex-to-int("0x00010000")
public val GL-LIST-BIT =                       hex-to-int("0x00020000")
public val GL-TEXTURE-BIT =                    hex-to-int("0x00040000")
public val GL-SCISSOR-BIT =                    hex-to-int("0x00080000")
public val GL-ALL-ATTRIB-BITS =                hex-to-int("0xFFFFFFFF")

public val GL-FALSE =                          0
public val GL-TRUE =                           1

public val GL-POINTS =                         hex-to-int("0x0000")
public val GL-LINES =                          hex-to-int("0x0001")
public val GL-LINE-LOOP =                      hex-to-int("0x0002")
public val GL-LINE-STRIP =                     hex-to-int("0x0003")
public val GL-TRIANGLES =                      hex-to-int("0x0004")
public val GL-TRIANGLE-STRIP =                 hex-to-int("0x0005")
public val GL-TRIANGLE-FAN =                   hex-to-int("0x0006")
public val GL-QUADS =                          hex-to-int("0x0007")

public val GL-COMPILE =                        4864

public val GL-NEVER =                          hex-to-int("0x0200")
public val GL-LESS =                           hex-to-int("0x0201")
public val GL-EQUAL =                          hex-to-int("0x0202")
public val GL-LEQUAL =                         hex-to-int("0x0203")
public val GL-GREATER =                        hex-to-int("0x0204")
public val GL-NOTEQUAL =                       hex-to-int("0x0205")
public val GL-GEQUAL =                         hex-to-int("0x0206")
public val GL-ALWAYS =                         hex-to-int("0x0207")

public val GL-ZERO =                           0
public val GL-ONE =                            1
public val GL-SRC-COLOR =                      hex-to-int("0x0300")
public val GL-ONE-MINUS-SRC-COLOR =            hex-to-int("0x0301")
public val GL-SRC-ALPHA =                      hex-to-int("0x0302")
public val GL-ONE-MINUS-SRC-ALPHA =            hex-to-int("0x0303")
public val GL-DST-ALPHA =                      hex-to-int("0x0304")
public val GL-ONE-MINUS-DST-ALPHA =            hex-to-int("0x0305")

public val GL-DST-COLOR =                      hex-to-int("0x0306")
public val GL-ONE-MINUS-DST-COLOR =            hex-to-int("0x0307")
public val GL-SRC-ALPHA-SATURATE =             hex-to-int("0x0308")

public val GL-FRONT =                          hex-to-int("0x0404")
public val GL-BACK =                           hex-to-int("0x0405")
public val GL-FRONT-AND-BACK =                 hex-to-int("0x0408")

public val GL-FOG =                            hex-to-int("0x0B60")
public val GL-LIGHTING =                       hex-to-int("0x0B50")
public val GL-TEXTURE-2D =                     hex-to-int("0x0DE1")
public val GL-CULL-FACE =                      hex-to-int("0x0B44")
public val GL-ALPHA-TEST =                     hex-to-int("0x0BC0")
public val GL-BLEND =                          hex-to-int("0x0BE2")
public val GL-COLOR-LOGIC-OP =                 hex-to-int("0x0BF2")
public val GL-DITHER =                         hex-to-int("0x0BD0")
public val GL-STENCIL-TEST =                   hex-to-int("0x0B90")
public val GL-DEPTH-TEST =                     hex-to-int("0x0B71")

public val GL-POINT-SMOOTH =                   hex-to-int("0x0B10")
public val GL-LINE-SMOOTH =                    hex-to-int("0x0B20")
public val GL-SCISSOR-TEST =                   hex-to-int("0x0C11")
public val GL-COLOR-MATERIAL =                 hex-to-int("0x0B57")
public val GL-NORMALIZE =                      hex-to-int("0x0BA1")
public val GL-RESCALE-NORMAL =                 hex-to-int("0x803A")
public val GL-POLYGON-OFFSET-FILL =            hex-to-int("0x8037")
public val GL-VERTEX-ARRAY =                   hex-to-int("0x8074")
public val GL-NORMAL-ARRAY =                   hex-to-int("0x8075")
public val GL-COLOR-ARRAY =                    hex-to-int("0x8076")
public val GL-TEXTURE-COORD-ARRAY =            hex-to-int("0x8078")
public val GL-MULTISAMPLE =                    hex-to-int("0x809D")
public val GL-SAMPLE-ALPHA-TO-COVERAGE =       hex-to-int("0x809E")
public val GL-SAMPLE-ALPHA-TO-ONE =            hex-to-int("0x809F")
public val GL-SAMPLE-COVERAGE =                hex-to-int("0x80A0")

public val GL-NO-ERROR =                       0
public val GL-INVALID-ENUM =                   hex-to-int("0x0500")
public val GL-INVALID-VALUE =                  hex-to-int("0x0501")
public val GL-INVALID-OPERATION =              hex-to-int("0x0502")
public val GL-STACK-OVERFLOW =                 hex-to-int("0x0503")
public val GL-STACK-UNDERFLOW =                hex-to-int("0x0504")
public val GL-OUT-OF-MEMORY =                  hex-to-int("0x0505")

public val GL-EXP =                            hex-to-int("0x0800")
public val GL-EXP2 =                           hex-to-int("0x0801")

public val GL-FOG-DENSITY =                    hex-to-int("0x0B62")
public val GL-FOG-START =                      hex-to-int("0x0B63")
public val GL-FOG-END =                        hex-to-int("0x0B64")
public val GL-FOG-MODE =                       hex-to-int("0x0B65")
public val GL-FOG-COLOR =                      hex-to-int("0x0B66")

public val GL-CW =                             hex-to-int("0x0900")
public val GL-CCW =                            hex-to-int("0x0901")

public val GL-SMOOTH-POINT-SIZE-RANGE =        hex-to-int("0x0B12")
public val GL-SMOOTH-LINE-WIDTH-RANGE =        hex-to-int("0x0B22")
public val GL-ALIASED-POINT-SIZE-RANGE =       hex-to-int("0x846D")
public val GL-ALIASED-LINE-WIDTH-RANGE =       hex-to-int("0x846E")
public val GL-IMPLEMENTATION-COLOR-READ-TYPE-OES = hex-to-int("0x8B9A")
public val GL-IMPLEMENTATION-COLOR-READ-FORMAT-OES = hex-to-int("0x8B9B")
public val GL-MAX-LIGHTS =                     hex-to-int("0x0D31")
public val GL-MAX-TEXTURE-SIZE =               hex-to-int("0x0D33")
public val GL-MAX-MODELVIEW-STACK-DEPTH =      hex-to-int("0x0D36")
public val GL-MAX-PROJECTION-STACK-DEPTH =     hex-to-int("0x0D38")
public val GL-MAX-TEXTURE-STACK-DEPTH =        hex-to-int("0x0D39")
public val GL-MAX-VIEWPORT-DIMS =              hex-to-int("0x0D3A")
public val GL-MAX-ELEMENTS-VERTICES =          hex-to-int("0x80E8")
public val GL-MAX-ELEMENTS-INDICES =           hex-to-int("0x80E9")
public val GL-MAX-TEXTURE-UNITS =              hex-to-int("0x84E2")
public val GL-NUM-COMPRESSED-TEXTURE-FORMATS = hex-to-int("0x86A2")
public val GL-COMPRESSED-TEXTURE-FORMATS =     hex-to-int("0x86A3")
public val GL-SUBPIXEL-BITS =                  hex-to-int("0x0D50")
public val GL-RED-BITS =                       hex-to-int("0x0D52")
public val GL-GREEN-BITS =                     hex-to-int("0x0D53")
public val GL-BLUE-BITS =                      hex-to-int("0x0D54")
public val GL-ALPHA-BITS =                     hex-to-int("0x0D55")
public val GL-DEPTH-BITS =                     hex-to-int("0x0D56")
public val GL-STENCIL-BITS =                   hex-to-int("0x0D57")

public val GL-DONT-CARE =                      hex-to-int("0x1100")
public val GL-FASTEST =                        hex-to-int("0x1101")
public val GL-NICEST =                         hex-to-int("0x1102")

public val GL-PERSPECTIVE-CORRECTION-HINT =    hex-to-int("0x0C50")
public val GL-POINT-SMOOTH-HINT =              hex-to-int("0x0C51")
public val GL-LINE-SMOOTH-HINT =               hex-to-int("0x0C52")
public val GL-POLYGON-SMOOTH-HINT =            hex-to-int("0x0C53")
public val GL-FOG-HINT =                       hex-to-int("0x0C54")

public val GL-LIGHT-MODEL-AMBIENT =            hex-to-int("0x0B53")
public val GL-LIGHT-MODEL-TWO-SIDE =           hex-to-int("0x0B52")

public val GL-AMBIENT =                        hex-to-int("0x1200")
public val GL-DIFFUSE =                        hex-to-int("0x1201")
public val GL-SPECULAR =                       hex-to-int("0x1202")
public val GL-POSITION =                       hex-to-int("0x1203")
public val GL-SPOT-DIRECTION =                 hex-to-int("0x1204")
public val GL-SPOT-EXPONENT =                  hex-to-int("0x1205")
public val GL-SPOT-CUTOFF =                    hex-to-int("0x1206")
public val GL-CONSTANT-ATTENUATION =           hex-to-int("0x1207")
public val GL-LINEAR-ATTENUATION =             hex-to-int("0x1208")
public val GL-QUADRATIC-ATTENUATION =          hex-to-int("0x1209")

public val GL-BYTE =                           hex-to-int("0x1400")
public val GL-UNSIGNED-BYTE =                  hex-to-int("0x1401")
public val GL-SHORT =                          hex-to-int("0x1402")
public val GL-UNSIGNED-SHORT =                 hex-to-int("0x1403")
public val GL-FLOAT =                          hex-to-int("0x1406")
public val GL-FIXED =                          hex-to-int("0x140C")

public val GL-CLEAR =                          hex-to-int("0x1500")
public val GL-AND =                            hex-to-int("0x1501")
public val GL-AND-REVERSE =                    hex-to-int("0x1502")
public val GL-COPY =                           hex-to-int("0x1503")
public val GL-AND-INVERTED =                   hex-to-int("0x1504")
public val GL-NOOP =                           hex-to-int("0x1505")
public val GL-XOR =                            hex-to-int("0x1506")
public val GL-OR =                             hex-to-int("0x1507")
public val GL-NOR =                            hex-to-int("0x1508")
public val GL-EQUIV =                          hex-to-int("0x1509")
public val GL-INVERT =                         hex-to-int("0x150A")
public val GL-OR-REVERSE =                     hex-to-int("0x150B")
public val GL-COPY-INVERTED =                  hex-to-int("0x150C")
public val GL-OR-INVERTED =                    hex-to-int("0x150D")
public val GL-NAND =                           hex-to-int("0x150E")
public val GL-SET =                            hex-to-int("0x150F")

public val GL-EMISSION =                       hex-to-int("0x1600")
public val GL-SHININESS =                      hex-to-int("0x1601")
public val GL-AMBIENT-AND-DIFFUSE =            hex-to-int("0x1602")

public val GL-MODELVIEW =                      hex-to-int("0x1700")
public val GL-PROJECTION =                     hex-to-int("0x1701")
public val GL-TEXTURE =                        hex-to-int("0x1702")

public val GL-ALPHA =                          hex-to-int("0x1906")
public val GL-RGB =                            hex-to-int("0x1907")
public val GL-RGBA =                           hex-to-int("0x1908")
public val GL-LUMINANCE =                      hex-to-int("0x1909")
public val GL-LUMINANCE-ALPHA =                hex-to-int("0x190A")

public val GL-UNPACK-ALIGNMENT =               hex-to-int("0x0CF5")
public val GL-PACK-ALIGNMENT =                 hex-to-int("0x0D05")

public val GL-UNSIGNED-SHORT-4-4-4-4 =         hex-to-int("0x8033")
public val GL-UNSIGNED-SHORT-5-5-5-1 =         hex-to-int("0x8034")
public val GL-UNSIGNED-SHORT-5-6-5 =           hex-to-int("0x8363")

public val GL-FLAT =                           hex-to-int("0x1D00")
public val GL-SMOOTH =                         hex-to-int("0x1D01")

public val GL-KEEP =                           hex-to-int("0x1E00")
public val GL-REPLACE =                        hex-to-int("0x1E01")
public val GL-INCR =                           hex-to-int("0x1E02")
public val GL-DECR =                           hex-to-int("0x1E03")

public val GL-VENDOR =                         hex-to-int("0x1F00")
public val GL-RENDERER =                       hex-to-int("0x1F01")
public val GL-VERSION =                        hex-to-int("0x1F02")
public val GL-EXTENSIONS =                     hex-to-int("0x1F03")

public val GL-MODULATE =                       hex-to-int("0x2100")
public val GL-DECAL =                          hex-to-int("0x2101")
public val GL-ADD =                            hex-to-int("0x0104")

public val GL-TEXTURE-ENV-MODE =               hex-to-int("0x2200")
public val GL-TEXTURE-ENV-COLOR =              hex-to-int("0x2201")

public val GL-TEXTURE-ENV =                    hex-to-int("0x2300")

public val GL-NEAREST =                        hex-to-int("0x2600")
public val GL-LINEAR =                         hex-to-int("0x2601")

public val GL-NEAREST-MIPMAP-NEAREST =         hex-to-int("0x2700")
public val GL-LINEAR-MIPMAP-NEAREST =          hex-to-int("0x2701")
public val GL-NEAREST-MIPMAP-LINEAR =          hex-to-int("0x2702")
public val GL-LINEAR-MIPMAP-LINEAR =           hex-to-int("0x2703")

public val GL-TEXTURE-MAG-FILTER =             hex-to-int("0x2800")
public val GL-TEXTURE-MIN-FILTER =             hex-to-int("0x2801")
public val GL-TEXTURE-WRAP-S =                 hex-to-int("0x2802")
public val GL-TEXTURE-WRAP-T =                 hex-to-int("0x2803")

public val GL-TEXTURE0 =                       hex-to-int("0x84C0")
public val GL-TEXTURE1 =                       hex-to-int("0x84C1")
public val GL-TEXTURE2 =                       hex-to-int("0x84C2")
public val GL-TEXTURE3 =                       hex-to-int("0x84C3")
public val GL-TEXTURE4 =                       hex-to-int("0x84C4")
public val GL-TEXTURE5 =                       hex-to-int("0x84C5")
public val GL-TEXTURE6 =                       hex-to-int("0x84C6")
public val GL-TEXTURE7 =                       hex-to-int("0x84C7")
public val GL-TEXTURE8 =                       hex-to-int("0x84C8")
public val GL-TEXTURE9 =                       hex-to-int("0x84C9")
public val GL-TEXTURE10 =                      hex-to-int("0x84CA")
public val GL-TEXTURE11 =                      hex-to-int("0x84CB")
public val GL-TEXTURE12 =                      hex-to-int("0x84CC")
public val GL-TEXTURE13 =                      hex-to-int("0x84CD")
public val GL-TEXTURE14 =                      hex-to-int("0x84CE")
public val GL-TEXTURE15 =                      hex-to-int("0x84CF")
public val GL-TEXTURE16 =                      hex-to-int("0x84D0")
public val GL-TEXTURE17 =                      hex-to-int("0x84D1")
public val GL-TEXTURE18 =                      hex-to-int("0x84D2")
public val GL-TEXTURE19 =                      hex-to-int("0x84D3")
public val GL-TEXTURE20 =                      hex-to-int("0x84D4")
public val GL-TEXTURE21 =                      hex-to-int("0x84D5")
public val GL-TEXTURE22 =                      hex-to-int("0x84D6")
public val GL-TEXTURE23 =                      hex-to-int("0x84D7")
public val GL-TEXTURE24 =                      hex-to-int("0x84D8")
public val GL-TEXTURE25 =                      hex-to-int("0x84D9")
public val GL-TEXTURE26 =                      hex-to-int("0x84DA")
public val GL-TEXTURE27 =                      hex-to-int("0x84DB")
public val GL-TEXTURE28 =                      hex-to-int("0x84DC")
public val GL-TEXTURE29 =                      hex-to-int("0x84DD")
public val GL-TEXTURE30 =                      hex-to-int("0x84DE")
public val GL-TEXTURE31 =                      hex-to-int("0x84DF")

public val GL-REPEAT =                         hex-to-int("0x2901")
public val GL-CLAMP-TO-EDGE =                  hex-to-int("0x812F")

public val GL-PALETTE4-RGB8-OES =              hex-to-int("0x8B90")
public val GL-PALETTE4-RGBA8-OES =             hex-to-int("0x8B91")
public val GL-PALETTE4-R5-G6-B5-OES =          hex-to-int("0x8B92")
public val GL-PALETTE4-RGBA4-OES =             hex-to-int("0x8B93")
public val GL-PALETTE4-RGB5-A1-OES =           hex-to-int("0x8B94")
public val GL-PALETTE8-RGB8-OES =              hex-to-int("0x8B95")
public val GL-PALETTE8-RGBA8-OES =             hex-to-int("0x8B96")
public val GL-PALETTE8-R5-G6-B5-OES =          hex-to-int("0x8B97")
public val GL-PALETTE8-RGBA4-OES =             hex-to-int("0x8B98")
public val GL-PALETTE8-RGB5-A1-OES =           hex-to-int("0x8B99")

public val GL-LIGHT0 =                         hex-to-int("0x4000")
public val GL-LIGHT1 =                         hex-to-int("0x4001")
public val GL-LIGHT2 =                         hex-to-int("0x4002")
public val GL-LIGHT3 =                         hex-to-int("0x4003")
public val GL-LIGHT4 =                         hex-to-int("0x4004")
public val GL-LIGHT5 =                         hex-to-int("0x4005")
public val GL-LIGHT6 =                         hex-to-int("0x4006")
public val GL-LIGHT7 =                         hex-to-int("0x4007")

public val GL-ATTRIB-STACK-DEPTH =             hex-to-int("0x0BB0")
public val GL-CLIENT-ATTRIB-STACK-DEPTH =      hex-to-int("0x0BB1")
public val GL-COLOR-CLEAR-VALUE =              hex-to-int("0x0C22")
public val GL-COLOR-WRITEMASK =                hex-to-int("0x0C23")
public val GL-CURRENT-INDEX =                  hex-to-int("0x0B01")
public val GL-CURRENT-COLOR =                  hex-to-int("0x0B00")
public val GL-CURRENT-NORMAL =                 hex-to-int("0x0B02")
public val GL-CURRENT-RASTER-COLOR =           hex-to-int("0x0B04")
public val GL-CURRENT-RASTER-DISTANCE =        hex-to-int("0x0B09")
public val GL-CURRENT-RASTER-INDEX =           hex-to-int("0x0B05")
public val GL-CURRENT-RASTER-POSITION =        hex-to-int("0x0B07")
public val GL-CURRENT-RASTER-TEXTURE-COORDS =  hex-to-int("0x0B06")
public val GL-CURRENT-RASTER-POSITION-VALID =  hex-to-int("0x0B08")
public val GL-CURRENT-TEXTURE-COORDS =         hex-to-int("0x0B03")
public val GL-INDEX-CLEAR-VALUE =              hex-to-int("0x0C20")
public val GL-INDEX-MODE =                     hex-to-int("0x0C30")
public val GL-INDEX-WRITEMASK =                hex-to-int("0x0C21")
public val GL-MODELVIEW-MATRIX =               hex-to-int("0x0BA6")
public val GL-MODELVIEW-STACK-DEPTH =          hex-to-int("0x0BA3")
public val GL-NAME-STACK-DEPTH =               hex-to-int("0x0D70")
public val GL-PROJECTION-MATRIX =              hex-to-int("0x0BA7")
public val GL-PROJECTION-STACK-DEPTH =         hex-to-int("0x0BA4")
public val GL-RENDER-MODE =                    hex-to-int("0x0C40")
public val GL-RGBA-MODE =                      hex-to-int("0x0C31")
public val GL-TEXTURE-MATRIX =                 hex-to-int("0x0BA8")
public val GL-TEXTURE-STACK-DEPTH =            hex-to-int("0x0BA5")
public val GL-VIEWPORT =                       hex-to-int("0x0BA2")
public val GL-RENDER =                         hex-to-int("0x1C00")
public val GL-FEEDBACK =                       hex-to-int("0x1C01")
public val GL-SELECT =                         hex-to-int("0x1C02")

public defn with-matrix (f:() -> False) -> False :
  gl-push-matrix()
  f()
  gl-pop-matrix()

public defn with-attrib (a:Int, f:() -> False) -> False :
  gl-push-attrib(a)
  f()
  gl-pop-attrib()

