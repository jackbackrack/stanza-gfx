;; See license.txt for details about licensing.

defpackage gfx/glfw :
  import core
  import collections
  import utils/string
  import gfx/gl
  import gfx/glu
  import geom/vec

extern glfwSetErrorCallback: (ptr<((int,ptr<byte>) -> int)>) -> int
extern glfwInit: () -> int
extern glfwCreateWindow: (int, int, ptr<byte>, ptr<?>, ptr<?>) -> ptr<?>
extern glfwGetClipboardString: (ptr<?>) -> ptr<byte>
extern glfwSetClipboardString: (ptr<?>, ptr<byte>) -> int
extern glfwWindowHint: (int, int) -> int
extern glfwGetPrimaryMonitor: () -> ptr<?>
extern glfwTerminate: () -> int
extern glfwMakeContextCurrent: (ptr<?>) -> int
extern glfwSwapInterval: (int) -> int
extern glfwSetKeyCallback: (ptr<?>,ptr<((ptr<?>,int,int,int,int) -> int)>) -> int
extern glfwSetMouseButtonCallback: (ptr<?>,ptr<((ptr<?>,int,int,int) -> int)>) -> int
extern glfwGetMouseButton: (ptr<?>, int) -> int
extern glfwSetCursorPosCallback: (ptr<?>,ptr<((ptr<?>,double,double) -> int)>) -> int
extern glfwSetScrollCallback: (ptr<?>,ptr<((ptr<?>,double,double) -> int)>) -> int
extern glfwSetFramebufferSizeCallback: (ptr<?>,ptr<((ptr<?>,int,int) -> int)>) -> int
extern glfwGetCursorPos: (ptr<?>,ptr<double>,ptr<double>) -> int
extern glfwWindowShouldClose: (ptr<?>) -> int
extern glfwSetWindowShouldClose: (ptr<?>, int) -> int
extern glfwGetFramebufferSize: (ptr<?>, ptr<int>, ptr<int>) -> int
extern glfwGetWindowSize: (ptr<?>, ptr<int>, ptr<int>) -> int
extern glfwSetWindowPos: (ptr<?>, int, int) -> int
extern glfwGetWindowPos: (ptr<?>, ptr<int>, ptr<int>) -> int
extern glfwGetKey: (ptr<?>, int) -> int
extern glfwGetTime: () -> double
extern glfwSwapBuffers: (ptr<?>) -> int
extern glfwPollEvents: () -> int
extern glfwDestroyWindow: (ptr<?>) -> int
extern glfwGetVideoMode: (ptr<?>) -> ptr<VidModeData>

public lostanza deftype Window :
  value: ptr<?>

public lostanza deftype Monitor :
  value: ptr<?>

public lostanza deftype VidModeData :
  width: int
  height: int
  redBits: int
  greenBits: int
  blueBits: int
  refreshRate: int

public lostanza deftype VidMode :
  value: ptr<VidModeData>

public lostanza defn width (mode:ref<VidMode>) -> ref<Int> :
  return new Int{mode.value.width}

public lostanza defn height (mode:ref<VidMode>) -> ref<Int> :
  return new Int{mode.value.height}

public lostanza defn red-bits (mode:ref<VidMode>) -> ref<Int> :
  return new Int{mode.value.redBits}

public lostanza defn green-bits (mode:ref<VidMode>) -> ref<Int> :
  return new Int{mode.value.greenBits}

public lostanza defn blue-bits (mode:ref<VidMode>) -> ref<Int> :
  return new Int{mode.value.blueBits}

public lostanza defn refresh-rate (mode:ref<VidMode>) -> ref<Int> :
  return new Int{mode.value.refreshRate}

public lostanza defn gui-get-video-mode (mon:ref<Monitor>) -> ref<VidMode> :
  val mode = call-c glfwGetVideoMode(mon.value)
  return new VidMode{mode}

public val GUI-RELEASE = 0
public val GUI-PRESS = 1
public val GUI-REPEAT = 2

public val GUI-MOD-SHIFT = 1
public val GUI-MOD-CONTROL = 2
public val GUI-MOD-ALT = 4
public val GUI-MOD-SUPER = 8
public val GUI-MOD-DOUBLE = 16
public val GUI-SCROLL = 16

public val GUI-MOUSE-BUTTON-1 = 0
public val GUI-MOUSE-BUTTON-2 = 1
public val GUI-MOUSE-BUTTON-3 = 2
public val GUI-MOUSE-BUTTON-4 = 3
public val GUI-MOUSE-BUTTON-5 = 4
public val GUI-MOUSE-BUTTON-6 = 5
public val GUI-MOUSE-BUTTON-7 = 6
public val GUI-MOUSE-BUTTON-8 = 7
public val GUI-MOUSE-BUTTON-LAST = GUI-MOUSE-BUTTON-8
public val GUI-MOUSE-BUTTON-LEFT = GUI-MOUSE-BUTTON-1
public val GUI-MOUSE-BUTTON-RIGHT = GUI-MOUSE-BUTTON-2
public val GUI-MOUSE-BUTTON-MIDDLE = GUI-MOUSE-BUTTON-3

public val GUI-KEY-UNKNOWN =  -1
public val GUI-KEY-SPACE =  32
public val GUI-KEY-APOSTROPHE =  39 ;; '
public val GUI-KEY-COMMA =  44 ;; ,
public val GUI-KEY-MINUS =  45 ;; -
public val GUI-KEY-PERIOD =  46 ;; .
public val GUI-KEY-SLASH =  47 ;; /
public val GUI-KEY-0 =  48
public val GUI-KEY-1 =  49
public val GUI-KEY-2 =  50
public val GUI-KEY-3 =  51
public val GUI-KEY-4 =  52
public val GUI-KEY-5 =  53
public val GUI-KEY-6 =  54
public val GUI-KEY-7 =  55
public val GUI-KEY-8 =  56
public val GUI-KEY-9 =  57
public val GUI-KEY-SEMICOLON =  59 ;; ;
public val GUI-KEY-EQUAL =  61 ;; =
public val GUI-KEY-A =  65
public val GUI-KEY-B =  66
public val GUI-KEY-C =  67
public val GUI-KEY-D =  68
public val GUI-KEY-E =  69
public val GUI-KEY-F =  70
public val GUI-KEY-G =  71
public val GUI-KEY-H =  72
public val GUI-KEY-I =  73
public val GUI-KEY-J =  74
public val GUI-KEY-K =  75
public val GUI-KEY-L =  76
public val GUI-KEY-M =  77
public val GUI-KEY-N =  78
public val GUI-KEY-O =  79
public val GUI-KEY-P =  80
public val GUI-KEY-Q =  81
public val GUI-KEY-R =  82
public val GUI-KEY-S =  83
public val GUI-KEY-T =  84
public val GUI-KEY-U =  85
public val GUI-KEY-V =  86
public val GUI-KEY-W =  87
public val GUI-KEY-X =  88
public val GUI-KEY-Y =  89
public val GUI-KEY-Z =  90
public val GUI-KEY-LEFT-BRACKET =  91 ;; [
public val GUI-KEY-BACKSLASH =  92 ;; \
public val GUI-KEY-RIGHT-BRACKET =  93 ;; ]
public val GUI-KEY-GRAVE-ACCENT =  96 ;; `
public val GUI-KEY-WORLD-1 =  161 ;; non-US #1
public val GUI-KEY-WORLD-2 =  162 ;; non-US #2
public val GUI-KEY-ESCAPE =  256
public val GUI-KEY-ENTER =  257
public val GUI-KEY-TAB =  258
public val GUI-KEY-BACKSPACE =  259
public val GUI-KEY-INSERT =  260
public val GUI-KEY-DELETE =  261
public val GUI-KEY-RIGHT =  262
public val GUI-KEY-LEFT =  263
public val GUI-KEY-DOWN =  264
public val GUI-KEY-UP =  265
public val GUI-KEY-PAGE-UP =  266
public val GUI-KEY-PAGE-DOWN =  267
public val GUI-KEY-HOME =  268
public val GUI-KEY-END =  269
public val GUI-KEY-CAPS-LOCK =  280
public val GUI-KEY-SCROLL-LOCK =  281
public val GUI-KEY-NUM-LOCK =  282
public val GUI-KEY-PRINT-SCREEN =  283
public val GUI-KEY-PAUSE =  284
public val GUI-KEY-F1 =  290
public val GUI-KEY-F2 =  291
public val GUI-KEY-F3 =  292
public val GUI-KEY-F4 =  293
public val GUI-KEY-F5 =  294
public val GUI-KEY-F6 =  295
public val GUI-KEY-F7 =  296
public val GUI-KEY-F8 =  297
public val GUI-KEY-F9 =  298
public val GUI-KEY-F10 =  299
public val GUI-KEY-F11 =  300
public val GUI-KEY-F12 =  301
public val GUI-KEY-F13 =  302
public val GUI-KEY-F14 =  303
public val GUI-KEY-F15 =  304
public val GUI-KEY-F16 =  305
public val GUI-KEY-F17 =  306
public val GUI-KEY-F18 =  307
public val GUI-KEY-F19 =  308
public val GUI-KEY-F20 =  309
public val GUI-KEY-F21 =  310
public val GUI-KEY-F22 =  311
public val GUI-KEY-F23 =  312
public val GUI-KEY-F24 =  313
public val GUI-KEY-F25 =  314
public val GUI-KEY-KP-0 =  320
public val GUI-KEY-KP-1 =  321
public val GUI-KEY-KP-2 =  322
public val GUI-KEY-KP-3 =  323
public val GUI-KEY-KP-4 =  324
public val GUI-KEY-KP-5 =  325
public val GUI-KEY-KP-6 =  326
public val GUI-KEY-KP-7 =  327
public val GUI-KEY-KP-8 =  328
public val GUI-KEY-KP-9 =  329
public val GUI-KEY-KP-DECIMAL =  330
public val GUI-KEY-KP-DIVIDE =  331
public val GUI-KEY-KP-MULTIPLY =  332
public val GUI-KEY-KP-SUBTRACT =  333
public val GUI-KEY-KP-ADD =  334
public val GUI-KEY-KP-ENTER =  335
public val GUI-KEY-KP-EQUAL =  336
public val GUI-KEY-LEFT-SHIFT =  340
public val GUI-KEY-LEFT-CONTROL =  341
public val GUI-KEY-LEFT-ALT =  342
public val GUI-KEY-LEFT-SUPER =  343
public val GUI-KEY-RIGHT-SHIFT =  344
public val GUI-KEY-RIGHT-CONTROL =  345
public val GUI-KEY-RIGHT-ALT =  346
public val GUI-KEY-RIGHT-SUPER =  347
public val GUI-KEY-MENU =  348
public val GUI-KEY-LAST = GUI-KEY-MENU

public val GUI-SAMPLES = hex-to-int("0x0002100D")
public val GUI-ALPHA-BITS = hex-to-int("0x00021004")
public val GUI-DOUBLE-BUFFER = hex-to-int("0x00021010")

public lostanza defn gui-init () -> ref<True> :
  val res = call-c glfwInit()
  return true

;; if res == 0L: return true else: return false

public lostanza defn gui-terminate () -> ref<False> :
  call-c glfwTerminate()
  return false

public lostanza defn gui-create-window (w:ref<Int>, h:ref<Int>, name:ref<String>) -> ref<Window> :
  val res = call-c glfwCreateWindow(w.value, h.value, addr!(name.chars), 0L as ptr<?>, 0L as ptr<?>)
  return new Window{res}

public lostanza defn gui-window-hint (hint:ref<Int>, x:ref<Int>) -> ref<False> :
  call-c glfwWindowHint(hint.value, x.value)
  return false

public lostanza defn gui-create-window (w:ref<Int>, h:ref<Int>, name:ref<String>, monitor:ref<Monitor>) -> ref<Window> :
  val res = call-c glfwCreateWindow(w.value, h.value, addr!(name.chars), monitor.value, 0L as ptr<?>)
  return new Window{res}

public lostanza defn gui-get-clipboard-string (win:ref<Window>) -> ref<String> :
  val res = call-c glfwGetClipboardString(win.value)
  if (res as long) == 0L :
    return String("")
  else :
    return String(res)

public lostanza defn gui-set-clipboard-string (win:ref<Window>, x:ref<String>) -> ref<False> :
  call-c glfwSetClipboardString(win.value, addr!(x.chars))
  return false

public lostanza defn gui-null-monitor () -> ref<Monitor> :
  return new Monitor{0L as ptr<?>}

public lostanza defn gui-get-primary-monitor () -> ref<Monitor> :
  val res = call-c glfwGetPrimaryMonitor()
  return new Monitor{res}

public lostanza defn gui-make-context-current (w:ref<Window>) -> ref<False> :
  call-c glfwMakeContextCurrent(w.value)
  return false

defn default-key-callback (w:Window, key:Int, scancode:Int, action:Int, mods:Int) -> False: false

var *key-callback*:((Window,Int,Int,Int,Int) -> False) = default-key-callback

extern defn do_key_callback (w:ptr<?>, key:int, scancode:int, action:int, mods:int) -> int :
  val win = new Window{w}
  [*key-callback*](win, new Int{key}, new Int{scancode}, new Int{action}, new Int{mods})
  return 0

public lostanza defn gui-set-key-callback (w:ref<Window>,f:ref<((Window,Int,Int,Int,Int) -> False)>) -> ref<False> :
  *key-callback* = f
  call-c glfwSetKeyCallback(w.value, addr(do_key_callback))
  return false

defn default-mouse-button-callback (w:Window, button:Int, action:Int, mods:Int) -> False: false

var *mouse-button-callback*:((Window,Int,Int,Int) -> False) = default-mouse-button-callback

extern defn do_mouse_button_callback (w:ptr<?>, button:int, action:int, mods:int) -> int :
  val win = new Window{w}
  [*mouse-button-callback*](win, new Int{button}, new Int{action}, new Int{mods})
  return 0

public lostanza defn gui-set-mouse-button-callback (w:ref<Window>,f:ref<((Window,Int,Int,Int) -> False)>) -> ref<False> :
  *mouse-button-callback* = f
  call-c glfwSetMouseButtonCallback(w.value, addr(do_mouse_button_callback))
  return false

public lostanza defn gui-get-mouse-button (w:ref<Window>, b:ref<Int>) -> ref<Int> :
  val res = call-c glfwGetMouseButton(w.value, b.value)
  return new Int{res}

lostanza var *cursor-x*:double = 0.0
lostanza var *cursor-y*:double = 0.0

public lostanza defn gui-get-cursor-pos (w:ref<Window>) -> ref<[Double, Double]> :
  call-c glfwGetCursorPos(w.value, addr(*cursor-x*), addr(*cursor-y*))
  return (new Tuple{2, new Double{*cursor-x* as double}, new Double{*cursor-y* as double}}) as ref<[Double, Double]>

defn default-cursor-pos-callback (w:Window, x:Double, y:Double) -> False: false

var *cursor-pos-callback*:((Window,Double,Double) -> False) = default-cursor-pos-callback

extern defn do_cursor_pos_callback (w:ptr<?>, x:double, y:double) -> int :
  val win = new Window{w}
  [*cursor-pos-callback*](win, new Double{x as double}, new Double{y as double})
  return 0

public lostanza defn gui-set-cursor-callback (w:ref<Window>,f:ref<((Window,Double,Double) -> False)>) -> ref<False> :
  *cursor-pos-callback* = f
  call-c glfwSetCursorPosCallback(w.value, addr(do_cursor_pos_callback))
  return false

defn default-scroll-callback (w:Window, x:Double, y:Double) -> False: false

var *scroll-callback*:((Window,Double,Double) -> False) = default-scroll-callback

extern defn do_scroll_callback (w:ptr<?>, x:double, y:double) -> int :
  val win = new Window{w}
  [*scroll-callback*](win, new Double{x as double}, new Double{y as double})
  return 0

public lostanza defn gui-set-scroll-callback (w:ref<Window>,f:ref<((Window,Double,Double) -> False)>) -> ref<False> :
  *scroll-callback* = f
  call-c glfwSetScrollCallback(w.value, addr(do_scroll_callback))
  return false

defn default-framebuffer-size-callback (w:Window, x:Int, y:Int) -> False: false

var *framebuffer-size-callback*:((Window,Int,Int) -> False) = default-framebuffer-size-callback

extern defn do_framebuffer_size_callback (w:ptr<?>, x:int, y:int) -> int :
  val win = new Window{w}
  [*framebuffer-size-callback*](win, new Int{x as int}, new Int{y as int})
  return 0

public lostanza defn gui-set-framebuffer-size-callback (w:ref<Window>,f:ref<((Window,Int,Int) -> False)>) -> ref<False> :
  *framebuffer-size-callback* = f
  call-c glfwSetFramebufferSizeCallback(w.value, addr(do_framebuffer_size_callback))
  return false

defn default-error-callback (error:Int, description:String) -> False : false

var *error-callback*:((Int,String) -> False) = default-error-callback

extern defn do_error_callback (error:int, description:ptr<byte>) -> int :
  val e = new Int{error}
  val s = String(description)
  [*error-callback*](e, s)
  return 0

public lostanza defn gui-set-error-callback (f:ref<((Int,String) -> False)>) -> ref<False> :
  *error-callback* = f
  call-c glfwSetErrorCallback(addr(do_error_callback))
  return false

public lostanza defn gui-window-should-close (w:ref<Window>) -> ref<True|False> :
  val res = call-c glfwWindowShouldClose(w.value)
  if res == 1 : return true else: return false

public lostanza defn gui-set-window-should-close (w:ref<Window>,b:ref<Int>) -> ref<False> :
  call-c glfwSetWindowShouldClose(w.value, b.value)
  return false

public lostanza defn gui-swap-buffers (w:ref<Window>) -> ref<False> :
  call-c glfwSwapBuffers(w.value)
  return false

lostanza var FRAMEBUFFER_WIDTH:int
lostanza var FRAMEBUFFER_HEIGHT:int

public lostanza defn gui-get-framebuffer-size (w:ref<Window>) -> ref<[Int,Int]> :
  call-c glfwGetFramebufferSize(w.value, addr(FRAMEBUFFER_WIDTH), addr(FRAMEBUFFER_HEIGHT))
  val FRAMEBUFFER-WIDTH  = new Int{FRAMEBUFFER_WIDTH}
  val FRAMEBUFFER-HEIGHT = new Int{FRAMEBUFFER_HEIGHT}
  return (new Tuple{2, FRAMEBUFFER-WIDTH, FRAMEBUFFER-HEIGHT}) as ref<[Int, Int]>

lostanza var WINDOW_WIDTH:int
lostanza var WINDOW_HEIGHT:int

public lostanza defn gui-get-window-size (w:ref<Window>) -> ref<[Int,Int]> :
  call-c glfwGetWindowSize(w.value, addr(WINDOW_WIDTH), addr(WINDOW_HEIGHT))
  val WINDOW-WIDTH  = new Int{WINDOW_WIDTH}
  val WINDOW-HEIGHT = new Int{WINDOW_HEIGHT}
  return (new Tuple{2, WINDOW-WIDTH, WINDOW-HEIGHT}) as ref<[Int, Int]>

public lostanza defn gui-swap-interval (i:ref<Int>) -> ref<False> :
  call-c glfwSwapInterval(i.value)
  return false

public lostanza defn gui-get-time () -> ref<Int> :
  val res = call-c glfwGetTime()
  return new Int{(res * 1000000.0) as int}

public lostanza defn gui-poll-events () -> ref<False> :
  val res = call-c glfwPollEvents()
  return false

public lostanza defn gui-destroy-window (w:ref<Window>) -> ref<False> :
  val res = call-c glfwDestroyWindow(w.value)
  return false

public lostanza defn gui-set-window-pos (win:ref<Window>, x:ref<Int>, y:ref<Int>) -> ref<False> :
  call-c glfwSetWindowPos(win.value, x.value, y.value)
  return false

lostanza var WINDOW_POS_X:int
lostanza var WINDOW_POS_Y:int

public lostanza defn gui-get-window-pos (w:ref<Window>) -> ref<[Int,Int]> :
  call-c glfwGetWindowPos(w.value, addr(WINDOW_POS_X), addr(WINDOW_POS_Y))
  val WINDOW-POS-X = new Int{WINDOW_POS_X}
  val WINDOW-POS-Y = new Int{WINDOW_POS_Y}
  return (new Tuple{2, WINDOW-POS-X, WINDOW-POS-Y}) as ref<[Int, Int]>

public lostanza defn gui-get-key (w:ref<Window>, k:ref<Int>) -> ref<Int> :
  val res = call-c glfwGetKey(w.value, k.value)
  return new Int{res}

public defn unproject (win:Window, ix:Double, iy:Double) -> [V2d, V2d] :
  val uxy = glu-unproject(V3i(to-int(ix), to-int(iy), 0), 0.0)
  ;; println("POS [%_ %_] %_ MAG %_ MOV %_" % [ix iy uxy mag(xform) mov(xform)])
  val [fw, fh] = gui-get-framebuffer-size(win)
  val [ww, wh] = gui-get-window-size(win)
  val ratio  = to-double(ww) / to-double(wh)
  val dh = 2.0
  val dw = dh * ratio
  ;; TODO: HACK -- WHAT IS GOING ON HERE? -- perhaps 
  ;; val mag = 2.0
  val mag = to-double(fw / ww)
  val pos =
    if mag == 1.0 :
      xy(uxy)
    else :
      val raw = mag * xy(uxy)
      val off-mag = 1.0 - 1.0 / mag
      V2d(x(raw) + dw * off-mag, y(raw) - dh * off-mag)
  ;; println("FW %_ FH %_ WW %_ WH %_ DW %_ DH %_ RAW %_" % [fw, fh, ww, wh, dw, dh, pos])
  [pos, V2d(dw, dh)]
