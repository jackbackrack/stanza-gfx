;; See license.txt for details about licensing.

defpackage gfx/glu :
  import core
  import collections
  import gfx/gl
  import geom/vec
  import geom/box
  import geom/polygon
  import geom/triangle
  import geom/mesh

val GL-DEPTH-COMPONENT =                 6402 ;; 0x1902

extern glGetDoublev: (int, ptr<double>) -> int
extern glGetIntegerv: (int, ptr<int>) -> int

extern tess_mesh_delete: (ptr<tess_mesh>) -> int
extern tess_triangulate: (ptr<float>) -> ptr<tess_mesh>
extern gluPerspective: (double, double, double, double) -> int
extern gluProject: (double, double, double, ptr<double>, ptr<double>, ptr<int>, ptr<double>, ptr<double>, ptr<double>) -> int
extern glReadPixels: (int, int, int, int, int, int, ptr<?>) -> int
extern gluUnProject: (double, double, double, ptr<double>, ptr<double>, ptr<int>, ptr<double>, ptr<double>, ptr<double>) -> int
extern gluOrtho2D: (double, double, double, double) -> int
extern gluLookAt: (double, double, double, double, double, double, double, double, double) -> int
extern gluPickMatrix: (double, double, double, double, ptr<int>) -> int
extern printf: (? ...) -> int
extern malloc: (long) -> ptr<?>
extern free: (ptr<?>) -> int


public defn triangles (poly:Polygon) -> Seqable<Triangle> :
  val mesh = triangulate(poly)
  for face in faces(mesh) seq :
    Triangle([xy(vertices(mesh)[x(face)]), xy(vertices(mesh)[y(face)]), xy(vertices(mesh)[z(face)])])

lostanza deftype tess_tri :
  a : int
  b : int
  c : int

lostanza deftype tess_vec3 :
  x : float
  y : float
  z : float

lostanza deftype tess_mesh :
  verts : ptr<tess_vec3>
  tris : ptr<tess_tri>
  tri-count : int
  vert-count : int

lostanza deftype TessMesh :
  var value : ptr<tess_mesh>

public lostanza defn get-vert-value (m:ref<TessMesh>, i:ref<Int>) -> ref<V3f> :
  val vert = m.value.verts[i.value]
  return V3f(new Float{vert.x}, new Float{vert.y}, new Float{vert.z})

public lostanza defn get-vert-index (m:ref<TessMesh>, i:ref<Int>) -> ref<V3i> :
  val tri = m.value.tris[i.value]
  return V3i(new Int{tri.a}, new Int{tri.b}, new Int{tri.c})

public lostanza defn tri-count (m:ref<TessMesh>) -> ref<Int> :
  return new Int{m.value.tri-count}

public lostanza defn vert-count (m:ref<TessMesh>) -> ref<Int> :
  return new Int{m.value.vert-count}

defn to-mesh (rm:TessMesh) -> Mesh :
  ;; println-all(["STZ MESH COUNT " tri-count(rm)])
  val tris = to-tuple $ for ti in 0 to tri-count(rm) seq : get-vert-index(rm, ti)
  ;; for (tri in tris, i in 0 to 4) do :
  ;;   println-all(["STZ TRI " tri])
  val verts = to-tuple $ for vi in 0 to vert-count(rm) seq : get-vert-value(rm, vi)
  ;; for (vert in verts, i in 0 to 4) do :
  ;;   println-all(["STZ VERT " i " " vert])
  gc(Mesh(verts, tris))

defn contours-size (poly:Polygon) -> Int :
  1 + sum $ for contour in contours(poly) seq : 1 + 2 * length(vertices(contour))

public lostanza defn triangulate (poly:ref<Polygon>) -> ref<Mesh> :
  val c-poly-size = contours-size(poly)
  ;; call-c printf("TRIANGULATE LENGTH %d\n", c-poly-size.value)
  val c-poly : ptr<float> = call-c malloc(c-poly-size.value * sizeof(float))
  var idx:int = 0
  c-poly[idx] = to-float(length(contours(poly))).value
  idx = idx + 1
  for (var i:int = 0, i < length(contours(poly)).value, i = i + 1) :
    val contour = get(contours(poly), new Int{i})
    c-poly[idx] = to-float(length(vertices(contour))).value
    ;; call-c printf("  CONTOUR SIZE %f\n", c-poly[idx])
    idx = idx + 1
    for (var j:int = 0, j < length(vertices(contour)).value, j = j + 1) :
      val pt = get(vertices(contour), new Int{j})
      c-poly[idx + 0] = x(pt).value
      c-poly[idx + 1] = y(pt).value
      idx = idx + 2
  val out = call-c tess_triangulate(c-poly)
  call-c free(c-poly as ptr<?>)
  val c-mesh = new TessMesh{out}
  val mesh = to-mesh(c-mesh)
  call-c tess_mesh_delete(out)
  c-mesh.value = 0L as ptr<tess_mesh>
  return mesh

public lostanza defn glu-perspective (a:ref<Float>, b:ref<Float>, c:ref<Float>, d:ref<Float>) -> ref<False> :
  call-c gluPerspective(a.value as double, b.value as double, c.value as double, d.value as double)
  return false

lostanza val *model* : ptr<double> = call-c malloc(16 * sizeof(double))
lostanza val *proj* : ptr<double> = call-c malloc(16 * sizeof(double))
lostanza val *view* : ptr<int>  = call-c malloc(4 * sizeof(int))
lostanza val *ptx* : ptr<double> = call-c malloc(1 * sizeof(double))
lostanza val *pty* : ptr<double> = call-c malloc(1 * sizeof(double))
lostanza val *ptz* : ptr<double> = call-c malloc(1 * sizeof(double))

lostanza defn load-project-data () -> ref<False> :
  call-c glGetDoublev( GL-MODELVIEW-MATRIX.value, *model* )
  call-c glGetDoublev( GL-PROJECTION-MATRIX.value, *proj* )
  call-c glGetIntegerv( GL-VIEWPORT.value, *view* )
  return false

public lostanza defn glu-project (obj:ref<V3f>) -> ref<V3f> :
  load-project-data()
  call-c gluProject(x(obj).value as double, y(obj).value as double, z(obj).value as double,
                    *model*, *proj*, *view*, *ptx*, *pty*, *ptz*)
  return new V3f{[*ptx*] as float, [*pty*] as float, [*ptz*] as float}

public defn glu-project-dims (dims:V3f) -> Box3f :
  Box3f(glu-project(-0.5f * dims), glu-project(0.5f * dims))

lostanza val *win-z* : ptr<float> = call-c malloc(1 * sizeof(float))

public lostanza defn glu-unproject (win:ref<V3i>, win-z:ref<Float>) -> ref<V3f> :
  load-project-data()
  val win-y = *view*[3] - y(win).value
  call-c gluUnProject(x(win).value as double, win-y as double, win-z.value as double,
                      *model*, *proj*, *view*, *ptx*, *pty*, *ptz*)
  return new V3f{[*ptx*] as float, [*pty*] as float, [*ptz*] as float}

public lostanza defn glu-unproject (win:ref<V3i>) -> ref<V3f> :
  val win-y = *view*[3] - y(win).value
  call-c glReadPixels(x(win).value, win-y, 1, 1, GL-DEPTH-COMPONENT.value, GL-FLOAT.value, *win-z*)
  return glu-unproject(win, new Float{[*win-z*] as float})

;; public lostanza defn glu-unproject (x:Int, y:Int) -> ref<V3f> :
;;   load-project-data()
;;   val win-x = x
;;   call-c glReadPixels(x, win-y, 1, 1, GL-DEPTH-COMPONENT, GL-FLOAT, *win-z*)
;;   call-c gluUnProject(to-float(x), to-float(win-y), [*win-z*], *model*, *proj*, *view*, *ptx*, *pty*, *ptz*)
;;   return new V3f{[*ptx*] as float, [*pty*] as float, [*ptz*] as float}

public lostanza defn glu-ortho2d (l:ref<Float>, r:ref<Float>, b:ref<Float>, t:ref<Float>) -> ref<False> :
  call-c gluOrtho2D(l.value as double, r.value as double, b.value as double, t.value as double)
  return false

public lostanza defn glu-look-at (ex:ref<Float>, ey:ref<Float>, ez:ref<Float>,
                                  cx:ref<Float>, cy:ref<Float>, cz:ref<Float>,
                                  ux:ref<Float>, uy:ref<Float>, uz:ref<Float>) -> ref<False> :
  call-c gluLookAt(ex.value as double, ey.value as double, ez.value as double,
                   cx.value as double, cy.value as double, cz.value as double,
                   ux.value as double, uy.value as double, uz.value as double)
  return false

public defn glu-look-at (eye:V3f, center:V3f, up:V3f) :
  glu-look-at(x(eye), y(eye), z(eye), x(center), y(center), z(center), x(up), y(up), z(up))

public lostanza defn glu-pick-matrix (ex:ref<Float>, ey:ref<Float>, ew:ref<Float>, eh:ref<Float>, viewport:ref<IntArray>) -> ref<False> :
  call-c gluPickMatrix(ex.value as double, ey.value as double, ew.value as double, eh.value as double,
                       addr!(viewport.data))
  return false
